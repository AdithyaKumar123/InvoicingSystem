
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Customer Management</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</head>
<body>
    <div class="container">
        <h1 class="my-4">Customer Management</h1>

        <!-- Add/Update Customer Form -->
        <div class="mb-4">
            <h2 id="formTitle">Add Customer</h2>
            <form id="customerForm">
                <input type="hidden" id="customerId">
                <div class="form-group">
                    <label for="name">Name</label>
                    <input type="text" class="form-control" id="name" required>
                </div>
                <div class="form-group">
                    <label for="email">Email</label>
                    <input type="email" class="form-control" id="email" required>
                </div>
                <div class="form-group">
                    <label for="address">Address</label>
                    <textarea class="form-control" id="address" required></textarea>
                </div>
                <div class="form-group">
                    <label for="contactNumber">Contact Number</label>
                    <input type="tel" class="form-control" id="contactNumber" required>
                </div>
                <button type="submit" class="btn btn-primary" id="submitButton">Add Customer</button>
            </form>
        </div>

        <!-- Customers Table -->
        <div class="mb-4">
            <h2>Customers</h2>
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Address</th>
                        <th>Contact Number</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="customersTableBody">
                    <!-- Rows will be dynamically populated here -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- JavaScript to handle form submissions and table population -->
    <script>
        // Function to fetch and display customers
        async function loadCustomers() {
            try {
                const response = await fetch('/api/customer');
                const customers = await response.json();

                const tableBody = document.getElementById('customersTableBody');
                tableBody.innerHTML = ''; // Clear existing rows

                customers.forEach(customer => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${customer.id}</td>
                        <td>${customer.name}</td>
                        <td>${customer.email}</td>
                        <td>${customer.address}</td>
                        <td>${customer.contactNumber}</td>
                        <td>
                            <button class="btn btn-warning btn-sm" onclick="editCustomer('${customer.id}')">Edit</button>
                            <button class="btn btn-danger btn-sm" onclick="deleteCustomer('${customer.id}')">Delete</button>
                        </td>
                    `;
                    tableBody.appendChild(row);
                });
            } catch (error) {
                console.error('Error loading customers:', error);
            }
        }

        // Function to handle form submission
        document.getElementById('customerForm').addEventListener('submit', async function(event) {
            event.preventDefault();

            const customer = {
                id: document.getElementById('customerId').value,
                name: document.getElementById('name').value,
                email: document.getElementById('email').value,
                address: document.getElementById('address').value,
                contactNumber: document.getElementById('contactNumber').value
            };

            const isEdit = !!customer.id;

            if (!isEdit) {
                customer.id = generateGuid(); // Generate a new GUID if adding a customer
            }

            try {
                const url = isEdit ? '/api/customer/updatecustomer' : '/api/customer/addcustomer';
                const method = isEdit ? 'PUT' : 'POST';

                const response = await fetch(url, {
                    method: method,
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(customer)
                });

                const result = await response.json();
                if (response.ok) {
                    swal.fire({text:`Customer ${isEdit ? 'updated' : 'added'} successfully!`, icon:'success'});
            
                    loadCustomers(); // Refresh the customer list
                    resetForm(); // Reset the form after submission
                } else {

                    swal.fire({text:`Failed to ${isEdit ? 'update' : 'add'} customer: ${result.message}`, icon:'error'})
                }
            } catch (error) {
                console.error(`Error ${isEdit ? 'updating' : 'adding'} customer:`, error);
            }
        });

        // Function to populate the form with existing customer data
        function editCustomer(customerId) {
            fetch(`/api/customer/${customerId}`)
                .then(response => response.json())
                .then(customer => {
                    document.getElementById('customerId').value = customer.id;
                    document.getElementById('name').value = customer.name;
                    document.getElementById('email').value = customer.email;
                    document.getElementById('address').value = customer.address;
                    document.getElementById('contactNumber').value = customer.contactNumber;

                    document.getElementById('formTitle').textContent = 'Update Customer';
                    document.getElementById('submitButton').textContent = 'Update Customer';
                })
                .catch(error => console.error('Error fetching customer:', error));
        }

        // Function to delete a customer
        function deleteCustomer(customerId) {
            if (confirm('Are you sure you want to delete this customer?')) {
                fetch(`/api/customer/deletecustomer/${customerId}`, { method: 'DELETE' })
                    .then(response => {
                        if (response.ok) {

                            swal.fire({text:'Customer deleted successfully', icon:'success'});

                            loadCustomers();
                        } else {
                            response.text().then(errorMessage => {
                                swal.fire({text:`Failed to delete customer: ${errorMessage}`, icon:'error'})
                          });
                        }
                    })
                    .catch(error => console.error('Error deleting customer:', error));
            }
        }

        // Function to reset the form
        function resetForm() {
            document.getElementById('customerId').value = '';
            document.getElementById('name').value = '';
            document.getElementById('email').value = '';
            document.getElementById('address').value = '';
            document.getElementById('contactNumber').value = '';

            document.getElementById('formTitle').textContent = 'Add Customer';
            document.getElementById('submitButton').textContent = 'Add Customer';
        }

        // Function to generate a new GUID
        function generateGuid() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }

        // Load customers on page load
        loadCustomers();
    </script>
</body>
</html>
