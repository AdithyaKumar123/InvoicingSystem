<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Category Management</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</head>
<body>
    <div class="container">
        <h1 class="my-4">Category Management</h1>

        <!-- Add/Update Category Form -->
        <div class="mb-4">
            <h2 id="formTitle">Add Category</h2>
            <form id="categoryForm">
                <input type="hidden" id="categoryId">
                <div class="form-group">
                    <label for="name">Name</label>
                    <input type="text" class="form-control" id="name" required>
                </div>
                <div class="form-group">
                    <label for="description">Description</label>
                    <textarea class="form-control" id="description" required></textarea>
                </div>
                <button type="submit" class="btn btn-primary" id="submitButton">Add Category</button>
            </form>
        </div>

        <!-- Categories Table -->
        <div class="mb-4">
            <h2>Categories</h2>
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="categoriesTableBody">
                    <!-- Rows will be dynamically populated here -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- JavaScript to handle form submissions and table population -->
    <script>
        // Function to fetch and display categories
        async function loadCategories() {
            try {
                const response = await fetch('/api/Category');
                const categories = await response.json();

                const tableBody = document.getElementById('categoriesTableBody');
                tableBody.innerHTML = ''; // Clear existing rows

                categories.forEach(category => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${category.id}</td>
                        <td>${category.name}</td>
                        <td>${category.description}</td>
                        <td>
                            <button class="btn btn-warning btn-sm" onclick="editCategory('${category.id}')">Edit</button>
                            <button class="btn btn-danger btn-sm" onclick="deleteCategory('${category.id}')">Delete</button>
                        </td>
                    `;
                    tableBody.appendChild(row);
                });
            } catch (error) {
                console.error('Error loading categories:', error);
            }
        }

        // Function to handle form submission
        document.getElementById('categoryForm').addEventListener('submit', async function(event) {
            event.preventDefault();

            const category = {
                id: document.getElementById('categoryId').value,
                name: document.getElementById('name').value,
                description: document.getElementById('description').value
            };

            const isEdit = !!category.id;

                if (!isEdit) {
        // If not editing, generate a new GUID
        category.id = generateGuid();
    }

            try {
                const url = isEdit ? '/api/Category/update' : '/api/Category/add';
                const method = isEdit ? 'PUT' : 'POST';
                
                const response = await fetch(url, {
                    method: method,
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(category)
                });

                const result = await response.json();
                if (response.ok) {

                    swal.fire({text:`Category ${isEdit ? 'updated' : 'added'} successfully!`, icon:'success'});

                    loadCategories(); // Refresh the category list
                    resetForm(); // Reset the form after submission
                } else {
                    swal.fire({text:`Failed to ${isEdit ? 'update' : 'add'} category: ${result.message}`, icon:'error'});
                }
            } catch (error) {
                console.error(`Error ${isEdit ? 'updating' : 'adding'} category:`, error);
            }
        });

        // Function to populate the form with existing category data
        function editCategory(categoryId) {
            fetch(`/api/Category/${categoryId}`)
                .then(response => response.json())
                .then(category => {
                    document.getElementById('categoryId').value = category.id;
                    document.getElementById('name').value = category.name;
                    document.getElementById('description').value = category.description;

                    document.getElementById('formTitle').textContent = 'Update Category';
                    document.getElementById('submitButton').textContent = 'Update Category';
                })
                .catch(error => console.error('Error fetching category:', error));
        }

        // Function to delete a category
        async function deleteCategory(categoryId) {
            if (!confirm('Are you sure you want to delete this category?')) return;

            try {
                const response = await fetch(`/api/Category/${categoryId}`, {
                    method: 'DELETE'
                });

                const result = await response.json();
                if (response.ok) {

                    swal.fire({text:result.message});
                    loadCategories(); // Refresh the category list
                } else {
                    swal.fire({text:`Failed to delete category: ${result.message}`, icon:'error'})
                }
            } catch (error) {
                console.error('Error deleting category:', error);
            }
        }

        // Function to reset the form
        function resetForm() {
            document.getElementById('categoryId').value = '';
            document.getElementById('name').value = '';
            document.getElementById('description').value = '';

            document.getElementById('formTitle').textContent = 'Add Category';
            document.getElementById('submitButton').textContent = 'Add Category';
        }

         function generateGuid() {
    // Generate a GUID v4
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random() * 16 | 0,
            v = c === 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}

        // Load categories on page load
        loadCategories();
    </script>
</body>
</html>
