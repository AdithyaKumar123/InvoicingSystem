
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Management</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</head>
<body>
    <div class="container">
        <h1 class="my-4">Product Management</h1>

        <!-- Add/Update Product Form -->
        <div class="mb-4">
            <h2 id="formTitle">Add Product</h2>
            <form id="productForm">
                <input type="hidden" id="productId">
                <div class="form-group">
                    <label for="name">Name</label>
                    <input type="text" class="form-control" id="name" required>
                </div>
                <div class="form-group">
                    <label for="description">Description</label>
                    <textarea class="form-control" id="description" required></textarea>
                </div>
                <div class="form-group">
                    <label for="price">Price</label>
                    <input type="number" class="form-control" id="price" step="0.01" required>
                </div>
                <div class="form-group">
                    <label for="quantity">Quantity</label>
                    <input type="number" class="form-control" id="quantity" required>
                </div>
              <div class="form-group">
    <label for="category">Category</label>
    <select class="form-control" id="category" required>
        <option value="">Select a category</option>
    </select>
</div>
                <button type="submit" class="btn btn-primary" id="submitButton">Add Product</button>
            </form>
        </div>

        <!-- Products Table -->
        <div class="mb-4">
            <h2>Products</h2>
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Category</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="productsTableBody">
                    <!-- Rows will be dynamically populated here -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- JavaScript to handle form submissions and table population -->
    <script>
        // Function to fetch and display products
        async function loadProducts() {
            try {
                const response = await fetch('/api/product');
                const products = await response.json();

                const tableBody = document.getElementById('productsTableBody');
                tableBody.innerHTML = ''; // Clear existing rows

                products.forEach(product => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${product.id}</td>
                        <td>${product.name}</td>
                        <td>${product.description}</td>
                        <td>${product.price}</td>
                        <td>${product.quantity}</td>
                        <td>${product.category}</td>
                        <td>
                        <button class="btn btn-warning btn-sm" onclick="editProduct('${product.id}')">Edit</button>
                        <button class="btn btn-danger btn-sm" onclick="deleteProduct('${product.id}')">Delete</button>
                        </td>
                    `;
                    tableBody.appendChild(row);
                });
            } catch (error) {
                console.error('Error loading products:', error);
            }
        }

        // Function to handle form submission
        document.getElementById('productForm').addEventListener('submit', async function(event) {
            event.preventDefault();

            const product = {
                id: document.getElementById('productId').value,
                name: document.getElementById('name').value,
                description: document.getElementById('description').value,
                price: parseFloat(document.getElementById('price').value),
                quantity: parseInt(document.getElementById('quantity').value),
                category: document.getElementById('category').value
            };

            const isEdit = !!product.id;

             if (!isEdit) {
        // If not editing, generate a new GUID
        product.id = generateGuid();
    }

            try {
                const url = isEdit ? '/api/Product/updateproduct' : '/api/Product/addproduct';
                const method = isEdit ? 'PUT' : 'POST';
                
                const response = await fetch(url, {
                    method: method,
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(product)
                });

                const result = await response.json();
                if (response.ok) {

                    swal.fire({text:`Product ${isEdit ? 'updated' : 'added'} successfully!`, icon:'success'});
                    loadProducts(); // Refresh the product list
                    resetForm(); // Reset the form after submission
                } else {
                      swal.fire({text:`Failed to ${isEdit ? 'update' : 'add'} product: ${result.message}`, icon:'error'});
                  
                }
            } catch (error) {
                console.error(`Error ${isEdit ? 'updating' : 'adding'} product:`, error);
            }
        });

        // Function to populate the form with existing product data
        function editProduct(productId) {
            fetch(`/api/product/${productId}`)
                .then(response => response.json())
                .then(product => {
                    document.getElementById('productId').value = product.id;
                    document.getElementById('name').value = product.name;
                    document.getElementById('description').value = product.description;
                    document.getElementById('price').value = product.price;
                    document.getElementById('quantity').value = product.quantity;
                    document.getElementById('category').value = product.category;

                    document.getElementById('formTitle').textContent = 'Update Product';
                    document.getElementById('submitButton').textContent = 'Update Product';
                })
                .catch(error => console.error('Error fetching product:', error));
        }

        // Function to delete the product
        function deleteProduct(productId) {
            if (confirm('Are you sure you want to delete this product?')) {
                fetch(`/api/Product/deleteproduct/${productId}`, { method: 'DELETE' })
                     .then(response => response.json()) // Convert response to JSON
            .then(data => {
                if (data.success) {
                    swal.fire({text:data.message})

                    loadProducts();
                } else {

                    swal.fire({text:`Failed to delete product: ${data.message}`, icon:'error'})

                }
            })
                    .catch(error => console.error('Error deleting customer:', error));
            }
        }

        // Function to reset the form
        function resetForm() {
            document.getElementById('productId').value = '';
            document.getElementById('name').value = '';
            document.getElementById('description').value = '';
            document.getElementById('price').value = '';
            document.getElementById('quantity').value = '';
            document.getElementById('category').value = '';

            document.getElementById('formTitle').textContent = 'Add Product';
            document.getElementById('submitButton').textContent = 'Add Product';
        }

       async function fetchCategory(){
             fetch('/api/Category') // Replace with your actual API endpoint
            .then(response => response.json())
            .then(categories => {
                const categorySelect = document.getElementById('category');
                
                // Populate the dropdown with category options
                categories.forEach(category => {
                    const option = document.createElement('option');
                    option.value = category.name; 
                    option.textContent = category.name; 
                    categorySelect.appendChild(option);
                });
            })
            .catch(error => console.error('Error fetching categories:', error));
        }

        function generateGuid() {
    // Generate a GUID v4
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random() * 16 | 0,
            v = c === 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}
fetchCategory()

        // Load products on page load
        loadProducts();
    </script>
</body>
</html>
