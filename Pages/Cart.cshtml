<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
   
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  
</head>
<body>
    <div class="container">
        <h1 class="my-4">Shopping Cart</h1>

        <!-- Customer Selection -->
        <div class="mb-4">
            <div class="form-group">
                <label for="customerSelect">Customer</label>
                <select id="customerSelect" class="form-control">
                     <option value="">Select a Customer</option>
                </select>
            </div>
        </div>
          <div class="mb-4">
            <div class="form-group">
                <label for="paymentSelect">Payment</label>
                <select id="paymentSelect" class="form-control">
                 <option value="">Select Payment Option</option>
                    <option value="cash">Cash</option>
                    <option value="credit">Credit</option>
                </select>
            </div>
        </div>

        <!-- Product Selection and Cart Addition -->
        <div class="mb-4">
            <h2>Add Product to Cart</h2>
            <form id="addProductForm">
                <div class="form-row">
                    <div class="form-group col-md-4">
                        <label for="productSelect">Product</label>
                        <select id="productSelect" class="form-control" required>
                           <option value="">Select a Product</option>
                        </select>
                    </div>
                    <div class="form-group col-md-2">
                        <label for="availableQuantity">Available Quantity</label>
                        <input type="number" class="form-control" id="availableQuantity" readonly>
                    </div>
                    <div class="form-group col-md-2">
                        <label for="price">Price</label>
                        <input type="number" class="form-control" id="price" readonly step="0.01">
                    </div>
                     <div class="form-group col-md-2">
                        <label for="tax">Tax (%)</label>
                        <select id="tax" class="form-control">
                            <option value="0">None</option>
                            <option value="5">5%</option>
                            <option value="10">10%</option>
                        </select>
                    </div>
                    <div class="form-group col-md-2">
                        <label for="discount">Discount (%)</label>
                        <input type="number" class="form-control" id="discount" step="0.01" min="0" max="100">
                    </div>
                    <div class="form-group col-md-2">
                        <label for="quantity">Quantity</label>
                        <input type="number" class="form-control" id="quantity" min="1" required>
                    </div>
                </div>
                <button type="submit" class="btn btn-primary">Add to Cart</button>
            </form>
        </div>

        <!-- Cart Table -->
        <div class="mb-4">
            <h2>Cart Items</h2>
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Product</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Total</th>
                         <th>Tax (%)</th>
                        <th>Discount (%)</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="cartTableBody">
                    <!-- Rows will be dynamically populated here -->
                </tbody>
            </table>
        </div>

        <div class="col-md-4">
    <h6>Total Amount</h6>
    <input type="text" id="totalAmount" class="form-control" readonly>
</div>
<br />



        <!-- Invoice Generation Button -->
        <div>
            <button class="btn btn-success" onclick="generateInvoice()">Generate Invoice</button>
        </div>
    </div>

    <!-- JavaScript to handle form submissions and table population -->
    <script>
        const cartProducts = new Set(); // To keep track of added products

        // Function to fetch and populate customers and products
        async function loadInitialData() {
            try {
                const customersResponse = await fetch('/api/customer');
                const customers = await customersResponse.json();

                const productsResponse = await fetch('/api/Product');
                const products = await productsResponse.json();

                const customerSelect = document.getElementById('customerSelect');
                customers.forEach(customer => {
                    const option = document.createElement('option');
                    option.value = customer.id;
                    option.textContent = customer.name;
                    customerSelect.appendChild(option);
                });

                const productSelect = document.getElementById('productSelect');
                products.forEach(product => {
                    const option = document.createElement('option');
                    option.value = product.id;
                    option.textContent = product.name;
                    productSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error loading initial data:', error);
            }
        }

        // Function to fetch product details
        async function loadProductDetails(productId) {
            try {
                const response = await fetch(`/api/Product/${productId}`);
                const product = await response.json();

                document.getElementById('availableQuantity').value = product.quantity;
                document.getElementById('price').value = product.price;
            } catch (error) {
                console.error('Error loading product details:', error);
            }
        }

        // Handle product selection change
        document.getElementById('productSelect').addEventListener('change', function() {
            const selectedProductId = this.value;
            if (selectedProductId) {
                loadProductDetails(selectedProductId);
            }
        });

        // Handle form submission
        document.getElementById('addProductForm').addEventListener('submit', function(event) {
            event.preventDefault();

            const productId = document.getElementById('productSelect').value;
            const availableQuantity = parseInt(document.getElementById('availableQuantity').value);
            const quantity = parseInt(document.getElementById('quantity').value);

            if (cartProducts.has(productId)) {
                 Swal.fire({
                text: 'This product is already in the cart.',
                icon: 'warning',
                confirmButtonText: 'OK'
            });
           
                return;
            }

            if (quantity > availableQuantity) {
                swal.fire({text:'Cannot add more than the available quantity', icon:'warning'});
  
                return;
            }

            const product = {
                id: productId,
                name: document.getElementById('productSelect').selectedOptions[0].text,
                price: parseFloat(document.getElementById('price').value),
                quantity: quantity,
                tax: parseFloat(document.getElementById('tax').value) || 0, // Include tax
                discount: parseFloat(document.getElementById('discount').value) || 0
            };

            const tableBody = document.getElementById('cartTableBody');
            const row = document.createElement('tr');
            const total = (product.price * product.quantity) * (1 + product.tax / 100) * (1 - product.discount / 100); // Apply tax and discount

            row.setAttribute('data-product-id', product.id); // Add data attribute to the row

            row.innerHTML = `
                <td>${product.name}</td>
                <td>${product.price.toFixed(2)}</td>
                <td>${product.quantity}</td>
                <td>${total.toFixed(2)}</td>
                <td>${product.tax.toFixed(2)}</td>
                <td>${product.discount.toFixed(2)}</td>
                <td><button class="btn btn-danger btn-sm" onclick="removeFromCart(this, '${product.id}')">Remove</button></td>
            `;

            tableBody.appendChild(row);
            cartProducts.add(productId); // Add product to the cartProducts set
            document.getElementById('addProductForm').reset();

            updateTotalAmount(); // Update the total amount
        });

        // Remove item from cart
        function removeFromCart(button, productId) {
            const row = button.closest('tr');
            row.remove();
            cartProducts.delete(productId); // Remove product from the cartProducts set
            updateTotalAmount();
        }

        // Update the total amount including taxes and discounts
function updateTotalAmount() {
    const rows = document.querySelectorAll('#cartTableBody tr');
    let totalAmount = 0;

    rows.forEach(row => {
        const cells = row.getElementsByTagName('td');
        const total = parseFloat(cells[3].textContent);
        totalAmount += total;
    });

    document.getElementById('totalAmount').value = totalAmount.toFixed(2);
}


        // Function to generate a GUID
function generateGuid() {
    // Simple function to generate a GUID
    // Replace with a proper GUID generator if needed
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}


async function generateInvoice() {
    const customerId = document.getElementById('customerSelect').value;
    const paymentType = document.getElementById('paymentSelect').value;
    const cartTableBody = document.getElementById('cartTableBody');
    const rows = cartTableBody.getElementsByTagName('tr');

    if (!customerId) {
         swal.fire({text:'Please select a customer', icon:'warning'});
        return;
    }

     if (!paymentType) {
        swal.fire({text:'Please select a payment type', icon:'warning'});
        return;
    }

    if (rows.length === 0) {
         swal.fire({text:'Cart is empty', icon:'warning'});
        return;
    }

    // Generate a unique invoice ID and current date
    const invoiceId = generateGuid();
    const date = new Date().toISOString();
    
    let totalPrice = 0;
    const products = [];

    // Process cart items
    for (let row of rows) {
        const cells = row.getElementsByTagName('td');
         const productId = row.getAttribute('data-product-id');
        const price = parseFloat(cells[1].textContent);
        const quantity = parseInt(cells[2].textContent);
           const tax = parseFloat(cells[4].textContent);
                const discount = parseFloat(cells[5].textContent);
       const total = (price * quantity) * (1 + tax / 100) * (1 - discount / 100); 

        totalPrice += total;

        products.push({
            Id: generateGuid(), // Generate a unique ID for each purchased product
            ProductId: productId,
            Price: price,
            Quantity: quantity,
            Tax: tax,
            Discount: discount
        });
    }

    const invoice = {
        Id: invoiceId,
        CustomerId: customerId,
        Date: date,
        TotalPrice: totalPrice,
        PaymentType: paymentType,
        Products: products
    };

    try {
        const response = await fetch('/api/invoice/createinvoice', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(invoice)
        });

        if (response.ok) {
             swal.fire({text:'Invoice created successfully', icon:'success'});
            window.location.href = '/api/invoice/view'; 
        } else {
            const errorText = await response.text();
              swal.fire({text:`Error creating invoice: ${errorText}`, icon:'error'});
        }
    } catch (error) {
        console.error('Error generating invoice:', error);
       swal.fire({text:`Error creating invoice: ${error}`, icon:'error'});
    }
}

        // Load initial data on page load
        loadInitialData();
    </script>
</body>
</html>
